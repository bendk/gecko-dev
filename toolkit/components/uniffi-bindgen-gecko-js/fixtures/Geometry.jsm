// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

"use strict";

var EXPORTED_SYMBOLS = [];

// UniFFIRustCallResult.code values
const CALL_SUCCESS = 0;
const CALL_ERROR = 1;
const CALL_INTERNAL_ERROR = 2;

// Write/Read data to/from an ArrayBuffer
class ArrayBufferDataStream {
    constructor(arrayBuffer) {
        this.dataView = new DataView(arrayBuffer);
        this.pos = 0;
    }

    readUint8() {
        let rv = this.dataView.getUint8(this.pos);
        this.pos += 1;
        return rv;
    }

    readUint16() {
        let rv = this.dataView.getUint16(this.pos);
        this.pos += 2;
        return rv;
    }

    readUint32() {
        let rv = this.dataView.getUint32(this.pos);
        this.pos += 4;
        return rv;
    }

    readUint64() {
        let rv = this.dataView.getUint64(this.pos);
        this.pos += 8;
        return rv;
    }

    readInt8() {
        let rv = this.dataView.getInt8(this.pos);
        this.pos += 1;
        return rv;
    }

    readInt16() {
        let rv = this.dataView.getInt16(this.pos);
        this.pos += 2;
        return rv;
    }

    readInt32() {
        let rv = this.dataView.getInt32(this.pos);
        this.pos += 4;
        return rv;
    }

    readInt64() {
        let rv = this.dataView.getInt64(this.pos);
        this.pos += 8;
        return rv;
    }

    readFloat32() {
        let rv = this.dataView.getFloat32(this.pos);
        this.pos += 4;
        return rv;
    }

    writeFloat32(value) {
        this.dataView.setFloat32(this.pos, value);
        this.pos += 4;
    }

    readFloat64() {
        let rv = this.dataView.getFloat64(this.pos);
        this.pos += 8;
        return rv;
    }

    writeFloat64(value) {
        this.dataView.setFloat64(this.pos, value);
        this.pos += 8;
    }

    writeUint8(value) {
      this.dataView.setUint8(this.pos, value);
      this.pos += 1;
    }

    writeUint32(value) {
      this.dataView.setUint32(this.pos, value);
      this.pos += 4;
    }

    writeString(value) {
      const encoder = new TextEncoder();
      // Note: in order to efficiently write this data, we first write the
      // string data, reserving 4 bytes for the size.
      const dest = new Uint8Array(this.dataView.buffer, this.pos + 4);
      const encodeResult = encoder.encodeInto(value, dest);
      if (encodeResult.read != value.length) {
        throw new UniFFIError(
            "writeString: out of space when writing to ArrayBuffer.  Did the computeSize() method returned the wrong result?"
        );
      }
      const size = encodeResult.written;
      // Next, go back and write the size before the string data
      this.dataView.setUint32(this.pos, size);
      // Finally, advance our position past both the size and string data
      this.pos += size + 4;
    }

    readString() {
      const decoder = new TextDecoder();
      const size = this.readUint32();
      const source = new Uint8Array(this.dataView.buffer, this.pos, size)
      const value = decoder.decode(source);
      this.pos += size;
      return value;
    }
}

function handleRustResult(result, liftCallback, liftErrCallback) {
    switch (result.code) {
        case CALL_SUCCESS:
            return liftCallback(result.data);

        case CALL_ERROR:
            throw liftErrCallback(result.data);

        case CALL_INTERNAL_ERROR:
            let message = result.internalErrorMessage;
            if (message) {
                throw new UniFFIInternalError(message);
            } else {
                throw new UniFFIInternalError("Unknown error");
            }

        default:
            throw new UniFFIError(`Unexpected status code: ${result.code}`);
    }
}

class UniFFIError {
    constructor(message) {
        this.message = message;
    }
}

class UniFFIInternalError extends UniFFIError {}

// Base class for FFI converters that lift/lower by reading/writing to an ArrayBuffer
class FfiConverterArrayBuffer {
    static lift(buf) {
        return this.read(new ArrayBufferDataStream(buf));
    }

    static lower(value) {
        const buf = new ArrayBuffer(this.computeSize(value));
        const dataStream = new ArrayBufferDataStream(buf);
        this.write(dataStream, value);
        return buf;
    }
}

class FfiConverterF64 {
    static computeSize() {
        return 8;
    }
    static lift(value) {
        return value;
    }
    static lower(value) {
        return value;
    }
    static write(dataStream, value) {
        dataStream.writeFloat64(value)
    }
    static read(dataStream) {
        return dataStream.readFloat64()
    }
}

class FfiConverterString {
    static lift(buf) {
        const decoder = new TextDecoder();
        const utf8Arr = new Uint8Array(buf);
        return decoder.decode(utf8Arr);
    }
    static lower(value) {
        const encoder = new TextEncoder();
        return encoder.encode(value).buffer;
    }

    static write(dataStream, value) {
        dataStream.writeString(value);
    }

    static read(dataStream) {
        return dataStream.readString();
    }

    static computeSize(value) {
        const encoder = new TextEncoder();
        return 4 + encoder.encode(value).length
    }
}

class Line {
    constructor(start,end) {
        this.start = start;
        this.end = end;
    }
    equals(other) {
        return (
            this.start.equals(other.start) &&
            this.end.equals(other.end)
        )
    }
}

class FfiConverterTypeLine {
    static lift(buf) {
        return this.read(new ArrayBufferDataStream(buf));
    }
    static lower(value) {
        const buf = new ArrayBuffer(this.computeSize(value));
        const dataStream = new ArrayBufferDataStream(buf);
        this.write(dataStream, value);
        return buf;
    }
    static read(dataStream) {
        return new Line(
            FfiConverterTypePoint.read(dataStream), 
            FfiConverterTypePoint.read(dataStream)
        );
    }
    static write(dataStream, value) {
        FfiConverterTypePoint.write(dataStream, value.start);
        FfiConverterTypePoint.write(dataStream, value.end);
    }

    static computeSize(value) {
        let totalSize = 0;
        totalSize += FfiConverterTypePoint.computeSize(value.start);
        totalSize += FfiConverterTypePoint.computeSize(value.end);
        return totalSize
    }
}

EXPORTED_SYMBOLS.push("Line");

class Point {
    constructor(coordX,coordY) {
        this.coordX = coordX;
        this.coordY = coordY;
    }
    equals(other) {
        return (
            this.coordX == other.coordX &&
            this.coordY == other.coordY
        )
    }
}

class FfiConverterTypePoint {
    static lift(buf) {
        return this.read(new ArrayBufferDataStream(buf));
    }
    static lower(value) {
        const buf = new ArrayBuffer(this.computeSize(value));
        const dataStream = new ArrayBufferDataStream(buf);
        this.write(dataStream, value);
        return buf;
    }
    static read(dataStream) {
        return new Point(
            FfiConverterF64.read(dataStream), 
            FfiConverterF64.read(dataStream)
        );
    }
    static write(dataStream, value) {
        FfiConverterF64.write(dataStream, value.coordX);
        FfiConverterF64.write(dataStream, value.coordY);
    }

    static computeSize(value) {
        let totalSize = 0;
        totalSize += FfiConverterF64.computeSize(value.coordX);
        totalSize += FfiConverterF64.computeSize(value.coordY);
        return totalSize
    }
}

EXPORTED_SYMBOLS.push("Point");




class ComplexEnum {}

EXPORTED_SYMBOLS.push("ComplexEnum");


ComplexEnum.V1 = class {
    constructor(
        s,
        num
        ) {
            this.s = s;
            this.num = num;
        }
}
ComplexEnum.V2 = class {
    constructor(
        s,
        num
        ) {
            this.s = s;
            this.num = num;
        }
}

class FfiConverterTypeComplexEnum extends FfiConverterArrayBuffer {
    static read(dataStream) {
        switch (dataStream.readInt32()) {
            case 1:
                return new ComplexEnum.V1(
                    FfiConverterString.read(dataStream),
                    FfiConverterU32.read(dataStream)
                    );
            case 2:
                return new ComplexEnum.V2(
                    FfiConverterString.read(dataStream),
                    FfiConverterF64.read(dataStream)
                    );
            default:
                return new Error("Unknown ComplexEnum variant");
        }
    }

    static write(dataStream, value) {
        if (value instanceof ComplexEnum.V1) {
            dataStream.writeInt32(1);
            FfiConverterString.write(dataStream, value.s);
            FfiConverterU32.write(dataStream, value.num);
            return;
        }
        if (value instanceof ComplexEnum.V2) {
            dataStream.writeInt32(2);
            FfiConverterString.write(dataStream, value.s);
            FfiConverterF64.write(dataStream, value.num);
            return;
        }
        return new Error("Unknown ComplexEnum variant");
    }

    static computeSize(value) {
        // Size of the Int indicating the variant
        let totalSize = 4;
        if (value instanceof ComplexEnum.V1) {
            totalSize += FfiConverterString.computeSize(value.s);
            totalSize += FfiConverterU32.computeSize(value.num);
            return totalSize;
        }
        if (value instanceof ComplexEnum.V2) {
            totalSize += FfiConverterString.computeSize(value.s);
            totalSize += FfiConverterF64.computeSize(value.num);
            return totalSize;
        }
        return new Error("Unknown ComplexEnum variant");
    }
}




class ExampleEnum {}

EXPORTED_SYMBOLS.push("ExampleEnum");


ExampleEnum.V1 = class {
    constructor(
        ) {
        }
}
ExampleEnum.V2 = class {
    constructor(
        ) {
        }
}

class FfiConverterTypeExampleEnum extends FfiConverterArrayBuffer {
    static read(dataStream) {
        switch (dataStream.readInt32()) {
            case 1:
                return new ExampleEnum.V1(
                    );
            case 2:
                return new ExampleEnum.V2(
                    );
            default:
                return new Error("Unknown ExampleEnum variant");
        }
    }

    static write(dataStream, value) {
        if (value instanceof ExampleEnum.V1) {
            dataStream.writeInt32(1);
            return;
        }
        if (value instanceof ExampleEnum.V2) {
            dataStream.writeInt32(2);
            return;
        }
        return new Error("Unknown ExampleEnum variant");
    }

    static computeSize(value) {
        // Size of the Int indicating the variant
        let totalSize = 4;
        if (value instanceof ExampleEnum.V1) {
            return totalSize;
        }
        if (value instanceof ExampleEnum.V2) {
            return totalSize;
        }
        return new Error("Unknown ExampleEnum variant");
    }
}class FfiConverterOptionalTypePoint extends FfiConverterArrayBuffer {
    static read(dataStream) {
        const code = dataStream.readUint8(0);
        switch (code) {
            case 0:
                return null
            case 1:
                return FfiConverterTypePoint.read(dataStream)
            default:
                throw UniFFIError(`Unexpected code: ${code}`);
        }
    }

    static write(dataStream, value) {
        if (!value) {
            dataStream.writeUint8(0);
        }
        dataStream.writeUint8(1);
        FfiConverterTypePoint.write(dataStream, value)
    }

    static computeSize() {
        return 1 + FfiConverterTypePoint.computeSize()
    }
}


function gradient(ln) {
<<<<<<< HEAD:toolkit/components/uniffi-bindgen-gecko-js/fixtures/Geometry.jsm
    const liftResult = (result) => FfiConverterF64.lift(result);
    const liftError = null;

    const callResult = GeometryScaffolding.geometryEb69Gradient(FfiConverterTypeLine.lower(ln),
=======
    const liftResult = (result) => FfiConverterF64.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dGradient(FfiConverterTypeLine.lower(ln),
>>>>>>> 91e1d041ccf0 (Adds support for enums):toolkit/components/geometry/js/Geometry.jsm
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

EXPORTED_SYMBOLS.push("gradient");
function intersection(ln1,ln2) {
<<<<<<< HEAD:toolkit/components/uniffi-bindgen-gecko-js/fixtures/Geometry.jsm
    const liftResult = (result) => FfiConverterOptionalTypePoint.lift(result);
    const liftError = null;

    const callResult = GeometryScaffolding.geometryEb69Intersection(FfiConverterTypeLine.lower(ln1),FfiConverterTypeLine.lower(ln2),
=======
    const liftResult = (result) => FfiConverterOptionalTypePoint.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dIntersection(FfiConverterTypeLine.lower(ln1),FfiConverterTypeLine.lower(ln2),
>>>>>>> 91e1d041ccf0 (Adds support for enums):toolkit/components/geometry/js/Geometry.jsm
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

<<<<<<< HEAD:toolkit/components/uniffi-bindgen-gecko-js/fixtures/Geometry.jsm
EXPORTED_SYMBOLS.push("intersection");
=======
EXPORTED_SYMBOLS.push("intersection");
function stringRound(s) {
    const liftResult = (result) => FfiConverterString.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dStringRound(FfiConverterString.lower(s),
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

EXPORTED_SYMBOLS.push("stringRound");
function stringRecordRound(p) {
    const liftResult = (result) => FfiConverterTypePoint.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dStringRecordRound(FfiConverterTypePoint.lower(p),
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

EXPORTED_SYMBOLS.push("stringRecordRound");
function arrRound(arr,size) {
    const liftResult = (result) => FfiConverterSequencestring.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dArrRound(FfiConverterSequencestring.lower(arr),FfiConverterU32.lower(size),
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

EXPORTED_SYMBOLS.push("arrRound");
function mapRound(map,size) {
    const liftResult = (result) => FfiConverterMapstring.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dMapRound(FfiConverterMapstring.lower(map),FfiConverterU32.lower(size),
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

EXPORTED_SYMBOLS.push("mapRound");
function enumRound(e) {
    const liftResult = (result) => FfiConverterTypeExampleEnum.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dEnumRound(FfiConverterTypeExampleEnum.lower(e),
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

EXPORTED_SYMBOLS.push("enumRound");
function complexEnumRound(ce) {
    const liftResult = (result) => FfiConverterTypeComplexEnum.lift(result)
    const liftError = null; // TODO
    const callResult = GeometryScaffolding.geometry4b5dComplexEnumRound(FfiConverterTypeComplexEnum.lower(ce),
    )
    return callResult.then((result) => handleRustResult(result,  liftResult, liftError));
}

EXPORTED_SYMBOLS.push("complexEnumRound");
>>>>>>> 91e1d041ccf0 (Adds support for enums):toolkit/components/geometry/js/Geometry.jsm
