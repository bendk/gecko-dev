// This file was autogenerated by some hot garbage in the `uniffi-bindgen-gecko-js` crate.
// Trust me, you don't want to mess with it!

#include "nsIGlobalObject.h"
#include "mozilla/MozPromise.h"
#include "mozilla/dom/RondpointScaffolding.h"
#include "mozilla/dom/OwnedRustBuffer.h"
#include "mozilla/dom/Promise.h"

namespace uniffi::rondpoint {
// For each Rust scaffolding function, define types and functions for calling it
namespace ffi_rondpoint_c728_retourneur_object_free {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
};

// Return values from the scaffolding function
struct Result {
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};::ffi_rondpoint_c728_Retourneur_object_free(
         aArgs.ptr,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_new {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
};

// Return values from the scaffolding function
struct Result {
    uint64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_new(
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_i8 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int8_t value;
};

// Return values from the scaffolding function
struct Result {
    int8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_i8(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_u8 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint8_t value;
};

// Return values from the scaffolding function
struct Result {
    uint8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_u8(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_i16 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int16_t value;
};

// Return values from the scaffolding function
struct Result {
    int16_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_i16(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_u16 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint16_t value;
};

// Return values from the scaffolding function
struct Result {
    uint16_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_u16(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_i32 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int32_t value;
};

// Return values from the scaffolding function
struct Result {
    int32_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_i32(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_u32 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint32_t value;
};

// Return values from the scaffolding function
struct Result {
    uint32_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_u32(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_i64 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int64_t value;
};

// Return values from the scaffolding function
struct Result {
    int64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_i64(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_u64 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint64_t value;
};

// Return values from the scaffolding function
struct Result {
    uint64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_u64(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_float {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    float value;
};

// Return values from the scaffolding function
struct Result {
    float mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const float& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_float(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_double {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    double value;
};

// Return values from the scaffolding function
struct Result {
    double mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const double& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_double(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_boolean {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int8_t value;
};

// Return values from the scaffolding function
struct Result {
    int8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_boolean(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_string {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_string(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_nombres_signes {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_nombres_signes(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_nombres {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_nombres(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_retourneur_identique_optionneur_dictionnaire {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Retourneur_identique_optionneur_dictionnaire(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace ffi_rondpoint_c728_stringifier_object_free {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
};

// Return values from the scaffolding function
struct Result {
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};::ffi_rondpoint_c728_Stringifier_object_free(
         aArgs.ptr,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_new {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
};

// Return values from the scaffolding function
struct Result {
    uint64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_new(
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_well_known_string {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_well_known_string(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_i8 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int8_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_i8(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_u8 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint8_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_u8(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_i16 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int16_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_i16(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_u16 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint16_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_u16(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_i32 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int32_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_i32(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_u32 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint32_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_u32(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_i64 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int64_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_i64(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_u64 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint64_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_u64(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_float {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    float value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const float& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_float(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_double {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    double value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const double& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_double(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_stringifier_to_string_boolean {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int8_t value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Stringifier_to_string_boolean(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace ffi_rondpoint_c728_optionneur_object_free {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
};

// Return values from the scaffolding function
struct Result {
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};::ffi_rondpoint_c728_Optionneur_object_free(
         aArgs.ptr,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_new {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
};

// Return values from the scaffolding function
struct Result {
    uint64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_new(
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_boolean {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int8_t value;
};

// Return values from the scaffolding function
struct Result {
    int8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_boolean(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_string {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_string(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_sequence {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_sequence(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_null {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_null(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_zero {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_zero(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u8_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint8_t value;
};

// Return values from the scaffolding function
struct Result {
    uint8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u8_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i8_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int8_t value;
};

// Return values from the scaffolding function
struct Result {
    int8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i8_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u16_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint16_t value;
};

// Return values from the scaffolding function
struct Result {
    uint16_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u16_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i16_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int16_t value;
};

// Return values from the scaffolding function
struct Result {
    int16_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i16_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u32_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint32_t value;
};

// Return values from the scaffolding function
struct Result {
    uint32_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u32_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i32_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int32_t value;
};

// Return values from the scaffolding function
struct Result {
    int32_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i32_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u64_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint64_t value;
};

// Return values from the scaffolding function
struct Result {
    uint64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u64_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i64_dec {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int64_t value;
};

// Return values from the scaffolding function
struct Result {
    int64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i64_dec(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u8_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint8_t value;
};

// Return values from the scaffolding function
struct Result {
    uint8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u8_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i8_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int8_t value;
};

// Return values from the scaffolding function
struct Result {
    int8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int8_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i8_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u16_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint16_t value;
};

// Return values from the scaffolding function
struct Result {
    uint16_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u16_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i16_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int16_t value;
};

// Return values from the scaffolding function
struct Result {
    int16_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int16_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i16_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u32_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint32_t value;
};

// Return values from the scaffolding function
struct Result {
    uint32_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u32_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i32_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int32_t value;
};

// Return values from the scaffolding function
struct Result {
    int32_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i32_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u64_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint64_t value;
};

// Return values from the scaffolding function
struct Result {
    uint64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u64_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_i64_hex {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    int64_t value;
};

// Return values from the scaffolding function
struct Result {
    int64_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const int64_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_i64_hex(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_u32_oct {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    uint32_t value;
};

// Return values from the scaffolding function
struct Result {
    uint32_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const uint32_t& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_u32_oct(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_f32 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    float value;
};

// Return values from the scaffolding function
struct Result {
    float mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const float& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_f32(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_f64 {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    double value;
};

// Return values from the scaffolding function
struct Result {
    double mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const double& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    uniFFIArgs.value = value;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_f64(
         aArgs.ptr,
         aArgs.value,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_optionneur_sinon_enum {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    uint64_t ptr;
    mozilla::dom::OwnedRustBuffer value;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const uint64_t& ptr, const ArrayBuffer& value,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.ptr = ptr;
    value.ComputeState();
    uniFFIArgs.value = OwnedRustBuffer(value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_Optionneur_sinon_enum(
         aArgs.ptr,
         aArgs.value.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_copie_dictionnaire {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer d;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& d,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    d.ComputeState();
    uniFFIArgs.d = OwnedRustBuffer(d, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_copie_dictionnaire(
         aArgs.d.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_copie_enumeration {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer e;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& e,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    e.ComputeState();
    uniFFIArgs.e = OwnedRustBuffer(e, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_copie_enumeration(
         aArgs.e.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_copie_enumerations {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer e;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& e,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    e.ComputeState();
    uniFFIArgs.e = OwnedRustBuffer(e, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_copie_enumerations(
         aArgs.e.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_copie_carte {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer c;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& c,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    c.ComputeState();
    uniFFIArgs.c = OwnedRustBuffer(c, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_copie_carte(
         aArgs.c.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace rondpoint_c728_switcheroo {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    int8_t b;
};

// Return values from the scaffolding function
struct Result {
    int8_t mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const int8_t& b,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    uniFFIArgs.b = b;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::rondpoint_c728_switcheroo(
         aArgs.b,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
}

namespace mozilla::dom {
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::FfiRondpointC728RetourneurObjectFree(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = ffi_rondpoint_c728_retourneur_object_free::PrepareArgs(ptr, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<ffi_rondpoint_c728_retourneur_object_free::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::FfiRondpointC728RetourneurObjectFree",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = ffi_rondpoint_c728_retourneur_object_free::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::FfiRondpointC728RetourneurObjectFree task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::FfiRondpointC728RetourneurObjectFree call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            ffi_rondpoint_c728_retourneur_object_free::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurNew(const GlobalObject& aUniFFIGlobal,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_new::PrepareArgs(aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_new::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurNew",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_new::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurNew task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurNew call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_new::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueI8(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_i8::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_i8::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueI8",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_i8::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueI8 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueI8 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_i8::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueU8(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_u8::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_u8::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueU8",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_u8::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueU8 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueU8 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_u8::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueI16(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_i16::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_i16::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueI16",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_i16::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueI16 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueI16 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_i16::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueU16(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_u16::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_u16::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueU16",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_u16::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueU16 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueU16 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_u16::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueI32(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_i32::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_i32::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueI32",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_i32::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueI32 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueI32 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_i32::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueU32(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_u32::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_u32::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueU32",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_u32::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueU32 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueU32 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_u32::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueI64(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_i64::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_i64::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueI64",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_i64::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueI64 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueI64 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_i64::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueU64(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_u64::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_u64::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueU64",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_u64::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueU64 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueU64 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_u64::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueFloat(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const float& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_float::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_float::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueFloat",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_float::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueFloat task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueFloat call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_float::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueDouble(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const double& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_double::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_double::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueDouble",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_double::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueDouble task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueDouble call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_double::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueBoolean(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_boolean::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_boolean::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueBoolean",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_boolean::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueBoolean task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueBoolean call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_boolean::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueString(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_string::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_string::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueString",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_string::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueString task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueString call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_string::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueNombresSignes(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_nombres_signes::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_nombres_signes::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueNombresSignes",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_nombres_signes::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueNombresSignes task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueNombresSignes call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_nombres_signes::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueNombres(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_nombres::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_nombres::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueNombres",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_nombres::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueNombres task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueNombres call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_nombres::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728RetourneurIdentiqueOptionneurDictionnaire(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_retourneur_identique_optionneur_dictionnaire::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_retourneur_identique_optionneur_dictionnaire::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728RetourneurIdentiqueOptionneurDictionnaire",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_retourneur_identique_optionneur_dictionnaire::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728RetourneurIdentiqueOptionneurDictionnaire task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728RetourneurIdentiqueOptionneurDictionnaire call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_retourneur_identique_optionneur_dictionnaire::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::FfiRondpointC728StringifierObjectFree(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = ffi_rondpoint_c728_stringifier_object_free::PrepareArgs(ptr, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<ffi_rondpoint_c728_stringifier_object_free::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::FfiRondpointC728StringifierObjectFree",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = ffi_rondpoint_c728_stringifier_object_free::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::FfiRondpointC728StringifierObjectFree task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::FfiRondpointC728StringifierObjectFree call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            ffi_rondpoint_c728_stringifier_object_free::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierNew(const GlobalObject& aUniFFIGlobal,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_new::PrepareArgs(aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_new::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierNew",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_new::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierNew task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierNew call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_new::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierWellKnownString(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_well_known_string::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_well_known_string::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierWellKnownString",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_well_known_string::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierWellKnownString task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierWellKnownString call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_well_known_string::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringI8(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_i8::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_i8::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringI8",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_i8::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringI8 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringI8 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_i8::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringU8(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_u8::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_u8::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringU8",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_u8::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringU8 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringU8 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_u8::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringI16(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_i16::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_i16::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringI16",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_i16::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringI16 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringI16 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_i16::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringU16(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_u16::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_u16::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringU16",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_u16::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringU16 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringU16 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_u16::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringI32(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_i32::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_i32::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringI32",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_i32::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringI32 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringI32 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_i32::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringU32(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_u32::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_u32::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringU32",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_u32::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringU32 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringU32 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_u32::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringI64(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_i64::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_i64::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringI64",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_i64::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringI64 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringI64 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_i64::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringU64(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_u64::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_u64::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringU64",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_u64::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringU64 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringU64 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_u64::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringFloat(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const float& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_float::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_float::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringFloat",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_float::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringFloat task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringFloat call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_float::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringDouble(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const double& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_double::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_double::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringDouble",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_double::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringDouble task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringDouble call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_double::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728StringifierToStringBoolean(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_stringifier_to_string_boolean::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_stringifier_to_string_boolean::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728StringifierToStringBoolean",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_stringifier_to_string_boolean::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728StringifierToStringBoolean task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728StringifierToStringBoolean call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_stringifier_to_string_boolean::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::FfiRondpointC728OptionneurObjectFree(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = ffi_rondpoint_c728_optionneur_object_free::PrepareArgs(ptr, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<ffi_rondpoint_c728_optionneur_object_free::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::FfiRondpointC728OptionneurObjectFree",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = ffi_rondpoint_c728_optionneur_object_free::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::FfiRondpointC728OptionneurObjectFree task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::FfiRondpointC728OptionneurObjectFree call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            ffi_rondpoint_c728_optionneur_object_free::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurNew(const GlobalObject& aUniFFIGlobal,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_new::PrepareArgs(aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_new::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurNew",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_new::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurNew task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurNew call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_new::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonBoolean(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_boolean::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_boolean::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonBoolean",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_boolean::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonBoolean task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonBoolean call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_boolean::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonString(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_string::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_string::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonString",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_string::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonString task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonString call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_string::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonSequence(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_sequence::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_sequence::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonSequence",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_sequence::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonSequence task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonSequence call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_sequence::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonNull(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_null::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_null::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonNull",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_null::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonNull task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonNull call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_null::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonZero(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_zero::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_zero::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonZero",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_zero::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonZero task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonZero call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_zero::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU8Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u8_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u8_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU8Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u8_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU8Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU8Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u8_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI8Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i8_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i8_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI8Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i8_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI8Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI8Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i8_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU16Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u16_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u16_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU16Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u16_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU16Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU16Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u16_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI16Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i16_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i16_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI16Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i16_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI16Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI16Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i16_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU32Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u32_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u32_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU32Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u32_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU32Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU32Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u32_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI32Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i32_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i32_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI32Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i32_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI32Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI32Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i32_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU64Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u64_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u64_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU64Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u64_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU64Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU64Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u64_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI64Dec(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i64_dec::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i64_dec::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI64Dec",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i64_dec::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI64Dec task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI64Dec call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i64_dec::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU8Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u8_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u8_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU8Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u8_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU8Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU8Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u8_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI8Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int8_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i8_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i8_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI8Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i8_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI8Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI8Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i8_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU16Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u16_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u16_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU16Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u16_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU16Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU16Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u16_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI16Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int16_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i16_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i16_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI16Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i16_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI16Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI16Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i16_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU32Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u32_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u32_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU32Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u32_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU32Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU32Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u32_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI32Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i32_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i32_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI32Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i32_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI32Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI32Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i32_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU64Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u64_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u64_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU64Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u64_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU64Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU64Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u64_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonI64Hex(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const int64_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_i64_hex::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_i64_hex::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonI64Hex",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_i64_hex::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonI64Hex task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonI64Hex call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_i64_hex::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonU32Oct(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const uint32_t& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_u32_oct::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_u32_oct::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonU32Oct",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_u32_oct::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonU32Oct task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonU32Oct call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_u32_oct::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonF32(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const float& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_f32::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_f32::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonF32",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_f32::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonF32 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonF32 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_f32::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonF64(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const double& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_f64::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_f64::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonF64",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_f64::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonF64 task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonF64 call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_f64::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728OptionneurSinonEnum(const GlobalObject& aUniFFIGlobal,const uint64_t& ptr, const ArrayBuffer& value,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_optionneur_sinon_enum::PrepareArgs(ptr, value, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_optionneur_sinon_enum::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728OptionneurSinonEnum",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_optionneur_sinon_enum::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728OptionneurSinonEnum task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728OptionneurSinonEnum call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_optionneur_sinon_enum::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728CopieDictionnaire(const GlobalObject& aUniFFIGlobal,const ArrayBuffer& d,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_copie_dictionnaire::PrepareArgs(d, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_copie_dictionnaire::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728CopieDictionnaire",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_copie_dictionnaire::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728CopieDictionnaire task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728CopieDictionnaire call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_copie_dictionnaire::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728CopieEnumeration(const GlobalObject& aUniFFIGlobal,const ArrayBuffer& e,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_copie_enumeration::PrepareArgs(e, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_copie_enumeration::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728CopieEnumeration",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_copie_enumeration::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728CopieEnumeration task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728CopieEnumeration call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_copie_enumeration::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728CopieEnumerations(const GlobalObject& aUniFFIGlobal,const ArrayBuffer& e,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_copie_enumerations::PrepareArgs(e, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_copie_enumerations::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728CopieEnumerations",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_copie_enumerations::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728CopieEnumerations task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728CopieEnumerations call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_copie_enumerations::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728CopieCarte(const GlobalObject& aUniFFIGlobal,const ArrayBuffer& c,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_copie_carte::PrepareArgs(c, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_copie_carte::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728CopieCarte",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_copie_carte::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728CopieCarte task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728CopieCarte call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_copie_carte::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::rondpoint;
already_AddRefed<Promise> RondpointScaffolding::RondpointC728Switcheroo(const GlobalObject& aUniFFIGlobal,const int8_t& b,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = rondpoint_c728_switcheroo::PrepareArgs(b, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<rondpoint_c728_switcheroo::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "RondpointScaffolding::RondpointC728Switcheroo",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = rondpoint_c728_switcheroo::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("RondpointScaffolding::RondpointC728Switcheroo task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "RondpointScaffolding::RondpointC728Switcheroo call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            rondpoint_c728_switcheroo::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}

}  // namespace mozilla::dom