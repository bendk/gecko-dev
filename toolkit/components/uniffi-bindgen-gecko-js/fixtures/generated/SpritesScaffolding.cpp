// This file was autogenerated by some hot garbage in the `uniffi-bindgen-gecko-js` crate.
// Trust me, you don't want to mess with it!

#include "nsIGlobalObject.h"
#include "mozilla/MozPromise.h"
#include "mozilla/dom/SpritesScaffolding.h"
#include "mozilla/dom/OwnedRustBuffer.h"
#include "mozilla/dom/Promise.h"
#include "mozilla/Logging.h"
#include "mozilla/EndianUtils.h"

static mozilla::LazyLogModule sUniFFISpritesScaffoldingLogger("uniffi_logger");


namespace uniffi::sprites {
// For each Rust scaffolding function, define types and functions for calling it
namespace ffi_sprites_ff2d_sprite_object_free {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
struct Args {
    void * ptr;
};

// Return values from the scaffolding function
struct Result {
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const UniFFIPointer& ptr,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    // We check if the pointer in the argument passed has the same type expected by this
    // function
    if (!ptr.IsSamePtrType(&SpritePointerType::getInstance())) {
        aUniFFIError.ThrowTypeError("pointer ptr is not of type Sprite");
        return uniFFIArgs;
    }
    uniFFIArgs.ptr = ptr.GetPtr();

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};::ffi_sprites_ff2d_Sprite_object_free(
         aArgs.ptr,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS: {
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Void return
            break;
        }

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace sprites_ff2d_sprite_new {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
struct Args {
    // RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
    // freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
    // isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
    // converted, but one fails to convert.
    mozilla::dom::OwnedRustBuffer initialPosition;
};

// Return values from the scaffolding function
struct Result {
    void * mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& initialPosition,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    // Convert the ArrayBuffer we get from JS to an OwnedRustBuffer
    initialPosition.ComputeState();
    uniFFIArgs.initialPosition = OwnedRustBuffer(initialPosition, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::sprites_ff2d_Sprite_new(
         // Call intoRustBuffer() to get a `RustBuffer` from an OwnedRustBuffer.  This transfers ownership to Rust,
         // OwnedRustBuffer will no longer try to free it
         aArgs.initialPosition.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS: {
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            RefPtr<UniFFIPointer> uniFFIPtr = UniFFIPointer::Create(aCallResult.mReturnValue, &SpritePointerType::getInstance() );
            aReturnValue.mData.setObjectOrNull(uniFFIPtr->WrapObject(aContext, nullptr));
            break;
        }

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace sprites_ff2d_sprite_new_relative_to {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
struct Args {
    // RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
    // freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
    // isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
    // converted, but one fails to convert.
    mozilla::dom::OwnedRustBuffer reference;
    // RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
    // freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
    // isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
    // converted, but one fails to convert.
    mozilla::dom::OwnedRustBuffer direction;
};

// Return values from the scaffolding function
struct Result {
    void * mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& reference, const ArrayBuffer& direction,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    // Convert the ArrayBuffer we get from JS to an OwnedRustBuffer
    reference.ComputeState();
    uniFFIArgs.reference = OwnedRustBuffer(reference, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }
    // Convert the ArrayBuffer we get from JS to an OwnedRustBuffer
    direction.ComputeState();
    uniFFIArgs.direction = OwnedRustBuffer(direction, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::sprites_ff2d_Sprite_new_relative_to(
         // Call intoRustBuffer() to get a `RustBuffer` from an OwnedRustBuffer.  This transfers ownership to Rust,
         // OwnedRustBuffer will no longer try to free it
         aArgs.reference.intoRustBuffer(),
         // Call intoRustBuffer() to get a `RustBuffer` from an OwnedRustBuffer.  This transfers ownership to Rust,
         // OwnedRustBuffer will no longer try to free it
         aArgs.direction.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS: {
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            RefPtr<UniFFIPointer> uniFFIPtr = UniFFIPointer::Create(aCallResult.mReturnValue, &SpritePointerType::getInstance() );
            aReturnValue.mData.setObjectOrNull(uniFFIPtr->WrapObject(aContext, nullptr));
            break;
        }

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace sprites_ff2d_sprite_get_position {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
struct Args {
    void * ptr;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const UniFFIPointer& ptr,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    // We check if the pointer in the argument passed has the same type expected by this
    // function
    if (!ptr.IsSamePtrType(&SpritePointerType::getInstance())) {
        aUniFFIError.ThrowTypeError("pointer ptr is not of type Sprite");
        return uniFFIArgs;
    }
    uniFFIArgs.ptr = ptr.GetPtr();

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::sprites_ff2d_Sprite_get_position(
         aArgs.ptr,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS: {
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // RustBuffer return, convert it to an ArrayBuffer
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;
        }

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace sprites_ff2d_sprite_move_to {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
struct Args {
    void * ptr;
    // RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
    // freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
    // isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
    // converted, but one fails to convert.
    mozilla::dom::OwnedRustBuffer position;
};

// Return values from the scaffolding function
struct Result {
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const UniFFIPointer& ptr, const ArrayBuffer& position,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    // We check if the pointer in the argument passed has the same type expected by this
    // function
    if (!ptr.IsSamePtrType(&SpritePointerType::getInstance())) {
        aUniFFIError.ThrowTypeError("pointer ptr is not of type Sprite");
        return uniFFIArgs;
    }
    uniFFIArgs.ptr = ptr.GetPtr();
    // Convert the ArrayBuffer we get from JS to an OwnedRustBuffer
    position.ComputeState();
    uniFFIArgs.position = OwnedRustBuffer(position, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};::sprites_ff2d_Sprite_move_to(
         aArgs.ptr,
         // Call intoRustBuffer() to get a `RustBuffer` from an OwnedRustBuffer.  This transfers ownership to Rust,
         // OwnedRustBuffer will no longer try to free it
         aArgs.position.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS: {
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Void return
            break;
        }

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace sprites_ff2d_sprite_move_by {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
struct Args {
    void * ptr;
    // RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
    // freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
    // isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
    // converted, but one fails to convert.
    mozilla::dom::OwnedRustBuffer direction;
};

// Return values from the scaffolding function
struct Result {
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const UniFFIPointer& ptr, const ArrayBuffer& direction,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    // We check if the pointer in the argument passed has the same type expected by this
    // function
    if (!ptr.IsSamePtrType(&SpritePointerType::getInstance())) {
        aUniFFIError.ThrowTypeError("pointer ptr is not of type Sprite");
        return uniFFIArgs;
    }
    uniFFIArgs.ptr = ptr.GetPtr();
    // Convert the ArrayBuffer we get from JS to an OwnedRustBuffer
    direction.ComputeState();
    uniFFIArgs.direction = OwnedRustBuffer(direction, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};::sprites_ff2d_Sprite_move_by(
         aArgs.ptr,
         // Call intoRustBuffer() to get a `RustBuffer` from an OwnedRustBuffer.  This transfers ownership to Rust,
         // OwnedRustBuffer will no longer try to free it
         aArgs.direction.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS: {
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Void return
            break;
        }

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace sprites_ff2d_translate {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
struct Args {
    // RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
    // freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
    // isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
    // converted, but one fails to convert.
    mozilla::dom::OwnedRustBuffer position;
    // RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
    // freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
    // isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
    // converted, but one fails to convert.
    mozilla::dom::OwnedRustBuffer direction;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& position, const ArrayBuffer& direction,
    mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    // Convert the ArrayBuffer we get from JS to an OwnedRustBuffer
    position.ComputeState();
    uniFFIArgs.position = OwnedRustBuffer(position, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }
    // Convert the ArrayBuffer we get from JS to an OwnedRustBuffer
    direction.ComputeState();
    uniFFIArgs.direction = OwnedRustBuffer(direction, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};result.mReturnValue =::sprites_ff2d_translate(
         // Call intoRustBuffer() to get a `RustBuffer` from an OwnedRustBuffer.  This transfers ownership to Rust,
         // OwnedRustBuffer will no longer try to free it
         aArgs.position.intoRustBuffer(),
         // Call intoRustBuffer() to get a `RustBuffer` from an OwnedRustBuffer.  This transfers ownership to Rust,
         // OwnedRustBuffer will no longer try to free it
         aArgs.direction.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS: {
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // RustBuffer return, convert it to an ArrayBuffer
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;
        }

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
}

namespace mozilla::dom {
using namespace uniffi::sprites;
already_AddRefed<Promise> SpritesScaffolding::FfiSpritesFf2dSpriteObjectFree(const GlobalObject& aUniFFIGlobal,const UniFFIPointer& ptr,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = ffi_sprites_ff2d_sprite_object_free::PrepareArgs(ptr, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<ffi_sprites_ff2d_sprite_object_free::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "SpritesScaffolding::FfiSpritesFf2dSpriteObjectFree",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = ffi_sprites_ff2d_sprite_object_free::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("SpritesScaffolding::FfiSpritesFf2dSpriteObjectFree task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "SpritesScaffolding::FfiSpritesFf2dSpriteObjectFree call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            ffi_sprites_ff2d_sprite_object_free::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::sprites;
already_AddRefed<Promise> SpritesScaffolding::SpritesFf2dSpriteNew(const GlobalObject& aUniFFIGlobal,const ArrayBuffer& initialPosition,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = sprites_ff2d_sprite_new::PrepareArgs(initialPosition, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<sprites_ff2d_sprite_new::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "SpritesScaffolding::SpritesFf2dSpriteNew",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = sprites_ff2d_sprite_new::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("SpritesScaffolding::SpritesFf2dSpriteNew task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "SpritesScaffolding::SpritesFf2dSpriteNew call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            sprites_ff2d_sprite_new::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::sprites;
already_AddRefed<Promise> SpritesScaffolding::SpritesFf2dSpriteNewRelativeTo(const GlobalObject& aUniFFIGlobal,const ArrayBuffer& reference, const ArrayBuffer& direction,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = sprites_ff2d_sprite_new_relative_to::PrepareArgs(reference, direction, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<sprites_ff2d_sprite_new_relative_to::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "SpritesScaffolding::SpritesFf2dSpriteNewRelativeTo",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = sprites_ff2d_sprite_new_relative_to::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("SpritesScaffolding::SpritesFf2dSpriteNewRelativeTo task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "SpritesScaffolding::SpritesFf2dSpriteNewRelativeTo call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            sprites_ff2d_sprite_new_relative_to::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::sprites;
already_AddRefed<Promise> SpritesScaffolding::SpritesFf2dSpriteGetPosition(const GlobalObject& aUniFFIGlobal,const UniFFIPointer& ptr,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = sprites_ff2d_sprite_get_position::PrepareArgs(ptr, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<sprites_ff2d_sprite_get_position::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "SpritesScaffolding::SpritesFf2dSpriteGetPosition",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = sprites_ff2d_sprite_get_position::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("SpritesScaffolding::SpritesFf2dSpriteGetPosition task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "SpritesScaffolding::SpritesFf2dSpriteGetPosition call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            sprites_ff2d_sprite_get_position::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::sprites;
already_AddRefed<Promise> SpritesScaffolding::SpritesFf2dSpriteMoveTo(const GlobalObject& aUniFFIGlobal,const UniFFIPointer& ptr, const ArrayBuffer& position,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = sprites_ff2d_sprite_move_to::PrepareArgs(ptr, position, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<sprites_ff2d_sprite_move_to::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "SpritesScaffolding::SpritesFf2dSpriteMoveTo",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = sprites_ff2d_sprite_move_to::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("SpritesScaffolding::SpritesFf2dSpriteMoveTo task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "SpritesScaffolding::SpritesFf2dSpriteMoveTo call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            sprites_ff2d_sprite_move_to::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::sprites;
already_AddRefed<Promise> SpritesScaffolding::SpritesFf2dSpriteMoveBy(const GlobalObject& aUniFFIGlobal,const UniFFIPointer& ptr, const ArrayBuffer& direction,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = sprites_ff2d_sprite_move_by::PrepareArgs(ptr, direction, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<sprites_ff2d_sprite_move_by::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "SpritesScaffolding::SpritesFf2dSpriteMoveBy",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = sprites_ff2d_sprite_move_by::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("SpritesScaffolding::SpritesFf2dSpriteMoveBy task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "SpritesScaffolding::SpritesFf2dSpriteMoveBy call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            sprites_ff2d_sprite_move_by::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::sprites;
already_AddRefed<Promise> SpritesScaffolding::SpritesFf2dTranslate(const GlobalObject& aUniFFIGlobal,const ArrayBuffer& position, const ArrayBuffer& direction,
 ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = sprites_ff2d_translate::PrepareArgs(position, direction, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<sprites_ff2d_translate::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "SpritesScaffolding::SpritesFf2dTranslate",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = sprites_ff2d_translate::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("SpritesScaffolding::SpritesFf2dTranslate task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "SpritesScaffolding::SpritesFf2dTranslate call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            sprites_ff2d_translate::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
  already_AddRefed<UniFFIPointer> SpritesScaffolding::ReadPointerSprite(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& aArrayBuff, long aPosition) {
      MOZ_LOG(sUniFFISpritesScaffoldingLogger, LogLevel::Info, ("[UniFFI] Reading Pointer from buffer"));
      aArrayBuff.ComputeState();

      // in Rust and in the write function, a pointer is converted to a void* then written as u64 BigEndian
      // we do the reverse here
      uint8_t* data_ptr = aArrayBuff.Data() + aPosition; // Pointer arithmetic, move by position bytes
      void* ptr = (void*)mozilla::BigEndian::readUint64(data_ptr);
      return UniFFIPointer::Create(ptr, &SpritePointerType::getInstance());
  }
  void SpritesScaffolding::WritePointerSprite(const GlobalObject& aUniFFIGlobal, const UniFFIPointer& aPtr, const ArrayBuffer& aArrayBuff, long aPosition) {
      MOZ_LOG(sUniFFISpritesScaffoldingLogger, LogLevel::Info, ("[UniFFI] Writing Pointer to buffer"));
      aArrayBuff.ComputeState();

      // in Rust and in the read function, a u64 is read as BigEndian and then converted to a pointer
      // we do the reverse here
      uint8_t* data_ptr = aArrayBuff.Data() + aPosition; // Pointer arithmetic, move by position bytes
      mozilla::BigEndian::writeUint64(data_ptr, (uint64_t)aPtr.GetPtr());
  }

  
}  // namespace mozilla::dom