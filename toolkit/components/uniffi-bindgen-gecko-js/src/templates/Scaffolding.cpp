// This file was autogenerated by some hot garbage in the `uniffi-bindgen-gecko-js` crate.
// Trust me, you don't want to mess with it!

#include "mozilla/dom/{{ ci.scaffolding_class() }}.h"
#include "mozilla/dom/ScaffoldingCall.h"

class OwnedRustBuffer;
class Promise;
class nsIGlobalObject;

namespace mozilla::dom {

{%- for func in ci.iter_user_ffi_function_definitions() %}
{%- let fully_qualified_name = "{}::{}"|format(ci.scaffolding_class(), func.nm()) %}

{%- if func.is_async() %}
already_AddRefed<Promise> {{ fully_qualified_name }}(const GlobalObject& aGlobal,
        const Sequence<ScaffoldingType>& aArgs,
        ErrorResult& aError) {
    return {{ func.scaffolding_call_handler() }}::CallAsync({{ func.rust_name() }}, aGlobal, aArgs, "{{ fully_qualified_name }}", aError);
}

{%- else %}
void {{ ci.scaffolding_class() }}::{{ func.nm() }}(const GlobalObject& aGlobal,
        const Sequence<ScaffoldingType>& aArgs,
        RootedDictionary<UniFFIScaffoldingCallResult>& aReturnValue, ErrorResult& aError) {
    {{ func.scaffolding_call_handler() }}::CallSync({{ func.rust_name() }}, aGlobal, aArgs, aReturnValue, "{{ fully_qualified_name }}", aError);
{%- endif %}

{%- endfor %}

  {%- for object in ci.object_definitions() %}
  already_AddRefed<UniFFIPointer> {{ ci.scaffolding_class() }}::ReadPointer{{ object.nm() }}(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& aArrayBuff, long aPosition) {
      return UniFFIPointer::Read(aArrayBuff, aPosition, &{{ object.nm() }}PointerType::getInstance());
  }
  void {{ ci.scaffolding_class() }}::WritePointer{{ object.nm() }}(const GlobalObject& aUniFFIGlobal, const UniFFIPointer& aPtr, const ArrayBuffer& aArrayBuff, long aPosition, ErrorResult& aError) {
      aPtr.Write(aArrayBuff, aPosition, &{{ object.nm() }}PointerType::getInstance(), aError);
  }

  {% endfor %}
}  // namespace mozilla::dom
