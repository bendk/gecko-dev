// This file was autogenerated by some hot garbage in the `uniffi-bindgen-gecko-js` crate.
// Trust me, you don't want to mess with it!

#include "nsIGlobalObject.h"
#include "mozilla/MozPromise.h"
#include "mozilla/dom/{{ ci.scaffolding_name() }}.h"
#include "mozilla/dom/OwnedRustBuffer.h"
#include "mozilla/dom/Promise.h"

namespace {{ ci.cpp_namespace() }} {
{%- for func in ci.iter_user_ffi_function_definitions() %}
// For each Rust scaffolding function, define types and functions for calling it
namespace {{ func.cpp_namespace() }} {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    {%- for arg in func.arguments() %}
    {%- if arg.is_rust_buffer() %}
    mozilla::dom::OwnedRustBuffer {{ arg.cpp_name() }};
    {%- else %}
    {{ arg.cpp_type() }} {{ arg.cpp_name() }};
    {%- endif %}
    {%- endfor %}
};

// Return values from the scaffolding function
struct Result {
    {{ func.rust_return_type() }} mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs({{ func.cpp_input_arg_list() }}, mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;

    {%- for arg in func.arguments() %}
    {%- if arg.is_rust_buffer() %}
    {{ arg.cpp_name() }}.ComputeState();
    uniFFIArgs.{{ arg.cpp_name() }} = OwnedRustBuffer({{ arg.cpp_name() }}, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }
    {%- else %}
    uniFFIArgs.{{ arg.cpp_name() }} = {{ arg.cpp_name() }}
    {%- endif %}
    {%- endfor %}

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};
    result.mReturnValue = ::{{ func.rust_name() }}(
         {%- for arg in func.arguments() %}
         {%- if arg.is_rust_buffer() %}
         aArgs.{{ arg.cpp_name() }}.intoRustBuffer(),
         {%- else %}
         aArgs.{{ arg.cpp_name() }},
         {%- endif %}
         {%- endfor %}
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            {%- if func.returns_rust_buffer() %}
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            {%- else %}
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            {%- endif %}
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
{%- endfor %}
}

namespace mozilla::dom {

{%- for func in ci.iter_user_ffi_function_definitions() %}
{%- let fully_qualified_name = "{}::{}"|format(ci.cpp_class_name(), func.cpp_name()) %}
using namespace {{ ci.cpp_namespace() }};

{%- if func.is_async() %}
already_AddRefed<Promise> {{ fully_qualified_name }}(const GlobalObject& aUniFFIGlobal, {{ func.cpp_input_arg_list() }}, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = {{ func.cpp_namespace() }}::PrepareArgs({% for arg in func.arguments() %}{{ arg.cpp_name() }}, {% endfor %}aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<{{ func.cpp_namespace() }}::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "{{ fully_qualified_name }}",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = {{ func.cpp_namespace() }}::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("{{ fully_qualified_name }} task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "{{ fully_qualified_name }} call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            {{ func.cpp_namespace() }}::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}

{%- else %}
void {{ ci.cpp_class_name() }}::{{ func.cpp_name() }}(const GlobalObject& aUniFFIGlobal, {{ func.cpp_input_arg_list() }}, RootedDictionary<UniFFIRustCallResult>& aUniFFIReturnValue, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    auto uniFFIArgs = {{ func.cpp_namespace() }}::PrepareArgs({% for arg in func.arguments() %}{{ arg.cpp_name() }}, {% endfor %}aUniFFIError);
    if (aUniFFIError.Failed()) {
        return;
    }
    auto uniFFIResult = {{ func.cpp_namespace() }}::Invoke(uniFFIArgs);
    {{ func.cpp_namespace() }}::ReturnResult(aUniFFIGlobal.Context(), uniFFIResult, aUniFFIReturnValue);
}
{%- endif %}

{%- endfor %}

}  // namespace mozilla::dom

