// This file was autogenerated by some hot garbage in the `uniffi-bindgen-gecko-js` crate.
// Trust me, you don't want to mess with it!

#include "nsIGlobalObject.h"
#include "mozilla/MozPromise.h"
#include "mozilla/dom/GeometryScaffolding.h"
#include "mozilla/dom/OwnedRustBuffer.h"
#include "mozilla/dom/Promise.h"

namespace uniffi::geometry {
// For each Rust scaffolding function, define types and functions for calling it
namespace geometry_77ca_gradient {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer ln;
};

// Return values from the scaffolding function
struct Result {
    double mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& ln, mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    ln.ComputeState();
    uniFFIArgs.ln = OwnedRustBuffer(ln, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};
    result.mReturnValue = ::geometry_77ca_gradient(
         aArgs.ln.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // All other return values (ints, floats, pointers) are handled as a JS number value
            aReturnValue.mData.setNumber(aCallResult.mReturnValue);
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace geometry_77ca_intersection {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer ln1;
    mozilla::dom::OwnedRustBuffer ln2;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& ln1, const ArrayBuffer& ln2, mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    ln1.ComputeState();
    uniFFIArgs.ln1 = OwnedRustBuffer(ln1, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }
    ln2.ComputeState();
    uniFFIArgs.ln2 = OwnedRustBuffer(ln2, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};
    result.mReturnValue = ::geometry_77ca_intersection(
         aArgs.ln1.intoRustBuffer(),
         aArgs.ln2.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace geometry_77ca_string_round {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer s;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& s, mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    s.ComputeState();
    uniFFIArgs.s = OwnedRustBuffer(s, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};
    result.mReturnValue = ::geometry_77ca_string_round(
         aArgs.s.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace geometry_77ca_string_record_round {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer p;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& p, mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    p.ComputeState();
    uniFFIArgs.p = OwnedRustBuffer(p, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};
    result.mReturnValue = ::geometry_77ca_string_record_round(
         aArgs.p.intoRustBuffer(),
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace geometry_77ca_arr_round {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer arr;
    uint32_t size;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& arr, const uint32_t& size, mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    arr.ComputeState();
    uniFFIArgs.arr = OwnedRustBuffer(arr, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }
    uniFFIArgs.size = size;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};
    result.mReturnValue = ::geometry_77ca_arr_round(
         aArgs.arr.intoRustBuffer(),
         aArgs.size,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
// For each Rust scaffolding function, define types and functions for calling it
namespace geometry_77ca_map_round {
using namespace mozilla::dom;
// Arguments to pass to the scaffolding function
//
// RustBuffer arguments are stored as OwnedRustBuffer instances.  That class takes care of
// freeing the buffer if the arguments don't get passed to Rust (i.e. intoRustBuffer()
// isn't called).  This can happen if some of the ArrayBuffer arguments are succuessfully
// converted, but one fails to convert.
struct Args {
    mozilla::dom::OwnedRustBuffer map;
    uint32_t size;
};

// Return values from the scaffolding function
struct Result {
    RustBuffer mReturnValue;
    RustCallStatus mCallStatus = {};
};

// Convert the arguments we get from JS to arguments to pass to Rust.
//
// On error, an error code will be stored in result.  Make sure to check this before
// passing the args to Invoke().
//
// For async calls this should be called in the main thread, since the GC can
// move the ArrayBuffer pointers while the background task is waiting.
Args PrepareArgs(const ArrayBuffer& map, const uint32_t& size, mozilla::ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args
    Args uniFFIArgs;
    map.ComputeState();
    uniFFIArgs.map = OwnedRustBuffer(map, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return uniFFIArgs;
    }
    uniFFIArgs.size = size;

    return uniFFIArgs;
}

// Call the scaffolding function
//
// For async calls this should be called in the worker thread
Result Invoke(Args& aArgs) {
    Result result = {};
    result.mReturnValue = ::geometry_77ca_map_round(
         aArgs.map.intoRustBuffer(),
         aArgs.size,
         &result.mCallStatus
     );
    return result;
}

// Return the result of the scaffolding call back to JS
void ReturnResult(JSContext* aContext, const Result& aCallResult, RootedDictionary<UniFFIRustCallResult>& aReturnValue) {
    switch (aCallResult.mCallStatus.code) {
        case uniffi::CALL_SUCCESS:
            // Successful call.  Populate data with the return value
            aReturnValue.mCode = uniffi::CALL_SUCCESS;
            // Convert result RustBuffer into an ArrayBuffer and set the data field
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mReturnValue).intoArrayBuffer(aContext));
            break;

        case uniffi::CALL_ERROR:
            // Rust Err() value.  Populate data with the `RustBuffer` containing the error
            aReturnValue.mCode = uniffi::CALL_ERROR;
            aReturnValue.mData.setObjectOrNull(OwnedRustBuffer(aCallResult.mCallStatus.error_buf).intoArrayBuffer(aContext));
            break;

        default:
            // This indicates a RustError, which shouldn't happen in practice since FF sets panic=abort
            aReturnValue.mCode = uniffi::CALL_INTERNAL_ERROR;
            aReturnValue.mInternalErrorMessage.AssignLiteral(u"Unexpected Error");
            break;
    }
}
}
}

namespace mozilla::dom {
using namespace uniffi::geometry;
already_AddRefed<Promise> GeometryScaffolding::Geometry77caGradient(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& ln, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = geometry_77ca_gradient::PrepareArgs(ln, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<geometry_77ca_gradient::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "GeometryScaffolding::Geometry77caGradient",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = geometry_77ca_gradient::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("GeometryScaffolding::Geometry77caGradient task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "GeometryScaffolding::Geometry77caGradient call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            geometry_77ca_gradient::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::geometry;
already_AddRefed<Promise> GeometryScaffolding::Geometry77caIntersection(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& ln1, const ArrayBuffer& ln2, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = geometry_77ca_intersection::PrepareArgs(ln1, ln2, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<geometry_77ca_intersection::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "GeometryScaffolding::Geometry77caIntersection",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = geometry_77ca_intersection::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("GeometryScaffolding::Geometry77caIntersection task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "GeometryScaffolding::Geometry77caIntersection call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            geometry_77ca_intersection::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::geometry;
already_AddRefed<Promise> GeometryScaffolding::Geometry77caStringRound(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& s, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = geometry_77ca_string_round::PrepareArgs(s, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<geometry_77ca_string_round::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "GeometryScaffolding::Geometry77caStringRound",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = geometry_77ca_string_round::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("GeometryScaffolding::Geometry77caStringRound task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "GeometryScaffolding::Geometry77caStringRound call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            geometry_77ca_string_round::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::geometry;
already_AddRefed<Promise> GeometryScaffolding::Geometry77caStringRecordRound(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& p, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = geometry_77ca_string_record_round::PrepareArgs(p, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<geometry_77ca_string_record_round::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "GeometryScaffolding::Geometry77caStringRecordRound",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = geometry_77ca_string_record_round::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("GeometryScaffolding::Geometry77caStringRecordRound task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "GeometryScaffolding::Geometry77caStringRecordRound call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            geometry_77ca_string_record_round::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::geometry;
already_AddRefed<Promise> GeometryScaffolding::Geometry77caArrRound(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& arr, const uint32_t& size, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = geometry_77ca_arr_round::PrepareArgs(arr, size, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<geometry_77ca_arr_round::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "GeometryScaffolding::Geometry77caArrRound",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = geometry_77ca_arr_round::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("GeometryScaffolding::Geometry77caArrRound task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "GeometryScaffolding::Geometry77caArrRound call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            geometry_77ca_arr_round::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}
using namespace uniffi::geometry;
already_AddRefed<Promise> GeometryScaffolding::Geometry77caMapRound(const GlobalObject& aUniFFIGlobal, const ArrayBuffer& map, const uint32_t& size, ErrorResult& aUniFFIError) {
    // Note: Prefix our params and local variables with "uniffi" to avoid name
    // conflicts with the scaffolding function args

    // Create the promise that we return to JS
    nsCOMPtr<nsIGlobalObject> uniFFIXPCOMGlobal = do_QueryInterface(aUniFFIGlobal.GetAsSupports());
    RefPtr<Promise> uniFFIReturnPromise = Promise::Create(uniFFIXPCOMGlobal, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Prepare arguments to pass to Rust
    auto uniFFIArgs = geometry_77ca_map_round::PrepareArgs(map, size, aUniFFIError);
    if (aUniFFIError.Failed()) {
        return nullptr;
    }

    // Create a second promise that gets resolved by a background task that calls the scaffolding function
    using UniFFITaskPromise = MozPromise<geometry_77ca_map_round::Result, nsresult, true>;
    RefPtr uniFFITaskPromise = new UniFFITaskPromise::Private(__func__);
    nsresult uniFFIDispatchResult = NS_DispatchBackgroundTask(
            NS_NewRunnableFunction(
                "GeometryScaffolding::Geometry77caMapRound",
                [args = std::move(uniFFIArgs), uniFFITaskPromise]() mutable {
                auto result = geometry_77ca_map_round::Invoke(args);
                uniFFITaskPromise->Resolve(std::move(result), __func__);
            }),
            NS_DISPATCH_EVENT_MAY_BLOCK);
    if (NS_FAILED(uniFFIDispatchResult)) {
        uniFFITaskPromise->Reject(uniFFIDispatchResult, __func__);
    }

    // When the background task promise completes, resolve the JS promise
    uniFFITaskPromise->Then(GetCurrentSerialEventTarget(), __func__,
            [uniFFIXPCOMGlobal, uniFFIReturnPromise](UniFFITaskPromise::ResolveOrRejectValue&& aResult) {
            if (!aResult.IsResolve()) {
                uniFFIReturnPromise->MaybeRejectWithUnknownError("GeometryScaffolding::Geometry77caMapRound task dispatch failed");
                return;
            }

            AutoEntryScript aes(uniFFIXPCOMGlobal, "GeometryScaffolding::Geometry77caMapRound call resolve");
            RootedDictionary<UniFFIRustCallResult> returnValue(aes.cx());

            geometry_77ca_map_round::ReturnResult(aes.cx(), aResult.ResolveValue(), returnValue);
            uniFFIReturnPromise->MaybeResolve(returnValue);
            }
    );

    // Return the JS promise, using forget() to convert it to already_AddRefed
    return uniFFIReturnPromise.forget();
}

}  // namespace mozilla::dom